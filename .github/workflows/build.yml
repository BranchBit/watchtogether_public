name: Auto Tag + Build + Release to Public Repo

on:
  push:
    branches: [ main ]

jobs:
  create-tag:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'tag')
    permissions:
      contents: write
    outputs:
      tag: ${{ steps.get_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3

      - name: Fetch all tags
        run: git fetch --tags

      - id: get_tag
        run: |
          latest=$(git tag --sort=-v:refname | grep '^v' | head -n 1)
          if [[ -z "$latest" ]]; then
            echo "tag=v1.0.0" >> $GITHUB_OUTPUT
          else
            version=$(echo "$latest" | sed 's/v//')
            IFS='.' read -r major minor patch <<< "$version"
            patch=$((patch + 1))
            echo "tag=v$major.$minor.$patch" >> $GITHUB_OUTPUT
          fi

      - name: Create and push tag (only if new)
        run: |
          tag=${{ steps.get_tag.outputs.tag }}
          if git rev-parse "$tag" >/dev/null 2>&1; then
            echo "⚠️ Tag $tag already exists. Skipping push."
          else
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git tag "$tag"
            git push origin "refs/tags/$tag"
          fi

  build-linux:
    needs: create-tag
    if: needs.create-tag.outputs.tag != ''
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      APP_VERSION: ${{ needs.create-tag.outputs.tag }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxkbfile-dev libsecret-1-dev fakeroot rpm libnss3 libxss1 libasound2-dev

      - name: Install npm deps
        run: npm install

      - name: Set version in package.json
        run: |
          version=${APP_VERSION#v}
          echo "Setting package.json version to $version"
          npm version $version --no-git-tag-version
        env:
          APP_VERSION: ${{ env.APP_VERSION }}

      - name: Build Linux AppImage
        run: npx electron-builder --linux AppImage

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifact
          path: dist/*.AppImage

  build-windows:
    needs: create-tag
    if: needs.create-tag.outputs.tag != ''
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      APP_VERSION: ${{ needs.create-tag.outputs.tag }}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install npm deps
        run: npm install

      - name: Set version in package.json
        shell: bash
        run: |
          version=${APP_VERSION#v}
          echo "Setting package.json version to $version"
          npm version $version --no-git-tag-version
        env:
          APP_VERSION: ${{ env.APP_VERSION }}

      - name: Build Windows EXE
        run: npx electron-builder --win nsis

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifact
          path: dist/*.exe

  build-macos:
    needs: create-tag
    if: needs.create-tag.outputs.tag != ''
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      APP_VERSION: ${{ needs.create-tag.outputs.tag }}
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install npm deps
        run: npm install

      - name: Set version in package.json
        run: |
          version=${APP_VERSION#v}
          echo "Setting package.json version to $version"
          npm version $version --no-git-tag-version
        env:
          APP_VERSION: ${{ env.APP_VERSION }}

      - name: Build macOS DMG
        run: npx electron-builder --mac

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifact
          path: |
            dist/*.dmg
            dist/*.app

  release-private:
    needs: [build-linux, build-windows, build-macos, create-tag]
    if: needs.create-tag.outputs.tag != ''
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release and upload assets to PRIVATE repo
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-tag.outputs.tag }}
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-public:
    needs: [release-private, create-tag]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      TAG: ${{ needs.create-tag.outputs.tag }}

    steps:
      - name: Checkout private repo
        uses: actions/checkout@v3

      - name: Push tag and commit to public repo (no source)
        run: |
          mkdir public-mirror
          cd public-mirror
          git init
          git remote add origin https://x-access-token:${GH_TOKEN}@github.com/BranchBit/watchtogether_public.git

          # Pull commit/tag from private repo
          git fetch --depth=1 origin $TAG

          # Mirror the tag/commit only
          git push origin "refs/tags/$TAG"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release in public repo
        uses: softprops/action-gh-release@v2
        with:
          repository: BranchBit/watchtogether_public
          tag_name: ${{ env.TAG }}
          files: artifacts/**/*.*
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
