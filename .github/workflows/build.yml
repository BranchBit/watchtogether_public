name: Auto Tag + Build + Release

on:
  push:
    branches: [ main ]

jobs:
  tag-build-release:
    if: contains(github.event.head_commit.message, 'tag')
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed to push tag and create release

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v3

      - name: Fetch tags
        run: git fetch --tags

      - name: Calculate next version
        id: get_tag
        run: |
          latest=$(git tag --sort=-v:refname | grep '^v' | head -n 1)
          echo "Latest tag: $latest"
          if [[ -z "$latest" ]]; then
            echo "tag=v1.0.0" >> $GITHUB_OUTPUT
          else
            version=$(echo $latest | sed 's/v//')
            IFS='.' read -r major minor patch <<< "$version"
            patch=$((patch + 1))
            echo "tag=v$major.$minor.$patch" >> $GITHUB_OUTPUT
          fi

      - name: Tag and push
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.get_tag.outputs.tag }}
          git push origin refs/tags/${{ steps.get_tag.outputs.tag }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install system deps (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxkbfile-dev libsecret-1-dev fakeroot rpm libnss3 libxss1 libasound2-dev

      - name: Install dependencies
        run: npm ci

      - name: Build Electron app
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            npx electron-builder --linux AppImage
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            npx electron-builder --win nsis
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            npx electron-builder --mac
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-artifact
          path: |
            dist/*.AppImage
            dist/*.exe
            dist/*.dmg
            dist/*.app

  release:
    needs: tag-build-release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.tag-build-release.outputs.tag }}
          files: artifacts/**/*  # All binaries
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
